create TABLE IF NOT EXISTS UserInfo (
  user_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  email VARCHAR(320) UNIQUE NOT NULL,
  login VARCHAR(100) UNIQUE NOT NULL,
  user_name VARCHAR(100) NOT NULL DEFAULT '',
  birthday DATE NOT NULL
);

create TABLE IF NOT EXISTS Friendship (
  proposer_id BIGINT,
  invited_id BIGINT,
  PRIMARY KEY (proposer_id, invited_id)
);

create TABLE IF NOT EXISTS Genre (
  genre_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  genre_name VARCHAR(100) UNIQUE NOT NULL
);

create TABLE IF NOT EXISTS RankMPA (
  RankMPA_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  RankMPA_name VARCHAR(10) UNIQUE
);

create TABLE IF NOT EXISTS Film (
  film_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  film_name VARCHAR(255) NOT NULL,
  description VARCHAR(200) NOT NULL,
  release_date DATE NOT NULL,
  duration INT NOT NULL,
  RankMPA_id INT NOT NULL
);

create TABLE IF NOT EXISTS FilmLikes (
  film_id BIGINT,
  user_id BIGINT,
  PRIMARY KEY (film_id, user_id)
);

create TABLE IF NOT EXISTS FilmGenre (
  film_id BIGINT,
  genre_id INT,
  PRIMARY KEY (film_id, genre_id)
);

create TABLE IF NOT EXISTS Director (
  director_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  director_name VARCHAR(100) UNIQUE NOT NULL
);

create TABLE IF NOT EXISTS FilmDirector (
  film_id BIGINT NOT NULL,
  director_id INT NOT NULL,
  PRIMARY KEY (film_id, director_id)
);

create TABLE IF NOT EXISTS Review(
  review_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  content VARCHAR(200) NOT NULL,
  is_positive boolean NOT NULL,
  user_id BIGINT NOT NULL,
  film_id BIGINT NOT NULL
);

create TABLE IF NOT EXISTS ReviewLikes(
  review_id BIGINT NOT NULL,
  user_id BIGINT NOT NULL,
  is_like boolean NOT NULL DEFAULT FALSE,
  PRIMARY KEY(review_id, user_id)
);

create TABLE IF NOT EXISTS Events (
    event_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    time_stamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    event_type VARCHAR(20) NOT NULL,
    operation VARCHAR(20) NOT NULL,
    user_id BIGINT NOT NULL,
    entity_id BIGINT NOT NULL
);

comment on table UserInfo is 'Данные пользователей';

comment on column UserInfo.user_id is 'Код пользователя';

comment on column UserInfo.email is 'Электронная почта пользователя';

comment on column UserInfo.login is 'Логин пользователя';

comment on column UserInfo.user_name is 'Имя пользователя для отображения';

comment on column UserInfo.birthday is 'Дата родения пользователя';

comment on table Friendship is 'Дрежественные связи пользователей. Одна запись (А,Б) - протянутая рука, две записи (А,Б и Б,А) - подтвержденная дружба';

comment on column Friendship.proposer_id is 'Предложивший дружбу пользователь';

comment on column Friendship.invited_id is 'Приглашаемый дружить пользователь';

comment on table Genre is 'Жанры фильмов';

comment on column Genre.genre_id is 'Код жанра';

comment on column Genre.genre_name is 'Название жанра';

comment on table RankMPA is 'Рейтинг MPA';

comment on column RankMPA.RankMPA_id is 'Код рейтинга';

comment on column RankMPA.RankMPA_name is 'Название (шифр) рейтинга';

comment on table Film is 'Данные фильмов';

comment on column Film.film_id is 'Код фильма';

comment on column Film.film_name is 'Название фильма';

comment on column Film.description is 'Описание фильма';

comment on column Film.release_date is 'Дата релиза';

comment on column Film.duration is 'Продолжительность в секундах';

comment on column Film.RankMPA_id is 'Код рейтинга MPA';

comment on table FilmLikes is 'Фильмы, понравившиеся пользователям';

comment on column FilmLikes.film_id is 'Код фильма';

comment on column FilmLikes.user_id is 'Код пользователя';

comment on table FilmGenre is 'Жанры, к котрым относится фильм';

comment on column FilmGenre.film_id is 'Код фильма';

comment on column FilmGenre.genre_id is 'Код жанра';

comment on table Director is 'Режиссеры';

comment on column Director.director_id is 'Код режиссера';

comment on column Director.director_name is 'Имя режиссера';

comment on table FilmDirector is 'Режиссеры фильма';

comment on column FilmDirector.film_id is 'Код фильма';

comment on column FilmDirector.director_id is 'Код режиссера';

comment on table Review is 'Отзывы';

comment on column Review.review_id is 'Код отзыва';

comment on column Review.content is 'Текст отзыва';

comment on column Review.is_positive is 'Тип отзыва';

comment on column Review.user_id is 'Код пользователя';

comment on column Review.film_id is 'Код фильма';

alter table Film drop constraint IF EXISTS RankMPA_id_RankMPA_RankMPA_id;
alter table Film add CONSTRAINT RankMPA_id_RankMPA_RankMPA_id FOREIGN KEY (RankMPA_id) REFERENCES RankMPA (RankMPA_id) ON delete CASCADE ON update CASCADE;

alter table FilmDirector drop constraint IF EXISTS FilmDirector_director_id_Director_director_id;
alter table FilmDirector add CONSTRAINT FilmDirector_director_id_Director_director_id FOREIGN KEY (director_id) REFERENCES Director (director_id) ON delete CASCADE ON update CASCADE;

alter table FilmDirector drop constraint IF EXISTS FilmDirector_film_id_Film_film_id;
alter table FilmDirector add CONSTRAINT FilmDirector_film_id_Film_film_id FOREIGN KEY (film_id) REFERENCES Film (film_id) ON delete CASCADE ON update CASCADE;

alter table FilmGenre drop constraint IF EXISTS FilmGenre_film_id_Film_film_id;
alter table FilmGenre add CONSTRAINT FilmGenre_film_id_Film_film_id FOREIGN KEY (film_id) REFERENCES Film (film_id) ON delete CASCADE ON update CASCADE;

alter table FilmGenre drop constraint IF EXISTS FilmGenre_user_id_UserInfo_user_id;
alter table FilmGenre add CONSTRAINT FilmGenre_user_id_UserInfo_user_id FOREIGN KEY (genre_id) REFERENCES Genre (genre_id) ON delete CASCADE ON update CASCADE;

alter table FilmLikes drop constraint IF EXISTS FilmLikes_film_id_Film_film_id;
alter table FilmLikes add CONSTRAINT FilmLikes_film_id_Film_film_id FOREIGN KEY (film_id) REFERENCES Film (film_id) ON delete CASCADE ON update CASCADE;

alter table FilmLikes drop constraint IF EXISTS FilmLikes_user_id_UserInfo_user_id;
alter table FilmLikes add CONSTRAINT FilmLikes_user_id_UserInfo_user_id FOREIGN KEY (user_id) REFERENCES UserInfo (user_id) ON delete CASCADE ON update CASCADE;

alter table Friendship drop constraint IF EXISTS FRIENDSHIP_CHECK;
alter table Friendship add CONSTRAINT FRIENDSHIP_CHECK CHECK (proposer_id<>invited_id);

alter table Friendship drop constraint IF EXISTS invited_id_UserInfo_user_id;
alter table Friendship add CONSTRAINT invited_id_UserInfo_user_id FOREIGN KEY (invited_id) REFERENCES UserInfo (user_id) ON delete CASCADE ON update CASCADE;

alter table Friendship drop constraint IF EXISTS proposer_id_UserInfo_user_id;
alter table Friendship add CONSTRAINT proposer_id_UserInfo_user_id FOREIGN KEY (proposer_id) REFERENCES UserInfo (user_id) ON delete CASCADE ON update CASCADE;

alter table Review drop constraint IF EXISTS Review_film_id_Film_film_id;
alter table Review add CONSTRAINT Review_film_id_Film_film_id FOREIGN KEY (film_id) REFERENCES Film (film_id) ON delete CASCADE ON update CASCADE;

alter table Review drop constraint IF EXISTS Review_user_id_UserInfo_user_id;
alter table Review add CONSTRAINT Review_user_id_UserInfo_user_id FOREIGN KEY (user_id) REFERENCES UserInfo (user_id) ON delete CASCADE ON update CASCADE;

alter table ReviewLikes drop constraint IF EXISTS ReviewLikes_review_id_Review_review_id;
alter table ReviewLikes add CONSTRAINT ReviewLikes_review_id_Review_review_id FOREIGN KEY (review_id) REFERENCES Review (review_id) ON delete CASCADE ON update CASCADE;

alter table ReviewLikes drop constraint IF EXISTS ReviewLikes_user_id_UserInfo_user_id;
alter table ReviewLikes add CONSTRAINT ReviewLikes_user_id_UserInfo_user_id FOREIGN KEY (user_id) REFERENCES UserInfo (user_id) ON delete CASCADE ON update CASCADE;

alter table Events drop constraint IF EXISTS Events_user_id_UserInfo_user_id;
alter table Events add CONSTRAINT Events_user_id_UserInfo_user_id FOREIGN KEY (user_id) REFERENCES UserInfo (user_id) ON delete CASCADE ON update CASCADE;
